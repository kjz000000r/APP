# -*- coding: utf-8 -*-
"""
NutriCoach ‚Äî —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–≥–∏ —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã
"""
import os
import re
import io
import json
import html
import asyncio
import tempfile
import subprocess
import logging
import datetime as dt
import secrets
import psycopg
from psycopg.errors import UniqueViolation
from typing import Optional, List, Tuple, Dict, Mapping
from io import BytesIO
from dotenv import load_dotenv
from openai import OpenAI
from PIL import Image
import pytesseract
import pdfplumber
import statistics
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    LabeledPrice, ReplyKeyboardMarkup, InputFile
)
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    MessageHandler, ConversationHandler, PreCheckoutQueryHandler,
    ContextTypes, filters, JobQueue
)
from html import escape
from telegram import MenuButtonWebApp, WebAppInfo
from telegram import WebAppData


# --------------------
# –õ–æ–≥–∏
# --------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(name)s: %(message)s")
logger = logging.getLogger("nutri-bot")

# --------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (.env)
# --------------------
load_dotenv()
BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
PAYMENT_TOKEN = os.getenv("PAYMENT_PROVIDER_TOKEN", "")
OPENROUTER_KEY = os.getenv("OPENROUTER_API_KEY", "")
WELCOME_IMAGE = os.getenv("WELCOME_IMAGE_URL", "https://imgur.com/a/WU18q0F")
ADMIN_USERNAME = (os.getenv("ADMIN_USERNAME", "") or "").lower()
CURRENCY = os.getenv("CURRENCY", "RUB")
TRIAL_HOURS = int(os.getenv("TRIAL_HOURS", "24"))
APP_TITLE = os.getenv("APP_TITLE", "NutriCoach Bot")
APP_REFERER = os.getenv("APP_REFERER", "https://example.com")
REF_BONUS_DAYS = int(os.getenv("REF_BONUS_DAYS", "7"))
PROMO_MAX_DAYS = int(os.getenv("PROMO_MAX_DAYS", "365"))
OCR_LANG = os.getenv("OCR_LANG", "rus+eng")
DB_PATH = os.getenv("DB_PATH", "subs.db")
MINI_APP_URL = os.getenv("MINI_APP_URL", "https://your-domain.com")

if not BOT_TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is required in .env")

# --------------------
# Conversation states
# --------------------
PLAN_AGE, PLAN_SEX, PLAN_WEIGHT, PLAN_HEIGHT, PLAN_ACTIVITY, PLAN_GOAL, PLAN_PREFS, PLAN_RESTR = range(8)

# --------------------
# Flags in user_data
# --------------------
EXPECT_LABS = "EXPECT_LABS"
EXPECT_RECIPE = "EXPECT_RECIPE"
EXPECT_QUESTION = "EXPECT_QUESTION"
EXPECT_MEAL = "EXPECT_MEAL"
EXPECT_WEIGHT = "EXPECT_WEIGHT"

# --------------------
# Prices / plans
# --------------------
PLANS = [
    {"key": "sub_7", "title": "–ü–æ–¥–ø–∏—Å–∫–∞ 7 –¥–Ω–µ–π", "days": 7, "price_minor": 10000},
    {"key": "sub_30", "title": "–ü–æ–¥–ø–∏—Å–∫–∞ 30 –¥–Ω–µ–π", "days": 30, "price_minor": 35000},
    {"key": "sub_90", "title": "–ü–æ–¥–ø–∏—Å–∫–∞ 90 –¥–Ω–µ–π", "days": 90, "price_minor": 80000},
    {"key": "sub_365", "title": "–ü–æ–¥–ø–∏—Å–∫–∞ 365 –¥–Ω–µ–π", "days": 365, "price_minor": 250000},
]

LABS_ONEOFF = {"key": "labs_350", "title": "–†–∞–∑–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤", "price_minor": 35000}

# --------------------
# AI client
# --------------------
ai = None
PRIMARY_MODEL = "deepseek/deepseek-r1-0528:free"
FALLBACK_MODELS: List[str] = [
    "deepseek/deepseek-chat",
    "deepseek/deepseek-chat-v3.1:free",
    "openai/gpt-4o-mini",
]
if OPENROUTER_KEY:
    try:
        ai = OpenAI(base_url="https://openrouter.ai/api/v1", api_key=OPENROUTER_KEY,
                    default_headers={"HTTP-Referer": APP_REFERER, "X-Title": APP_TITLE})
    except Exception as e:
        logger.warning(f"AI client init error: {e}")
        ai = None

async def ai_chat(system: str, user_text: str, temperature: float = 0.5) -> str:
    if ai is None:
        return "AI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OPENROUTER_API_KEY –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –∫–ª–∏–µ–Ω—Ç–∞."
    def sync_call(model: str):
        return ai.chat.completions.create(
            model=model,
            messages=[{"role":"system","content":system},{"role":"user","content":user_text}],
            temperature=temperature
        )
    last_err = None
    for model in [PRIMARY_MODEL] + FALLBACK_MODELS:
        try:
            resp = await asyncio.to_thread(sync_call, model)
            if hasattr(resp, "choices") and resp.choices:
                return resp.choices[0].message.content
            else:
                return resp["choices"][0]["message"]["content"]
        except Exception as e:
            last_err = e
            logger.warning(f"AI model {model} error: {e}")
            continue
    logger.exception(f"All AI models failed: {last_err}")
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
async def setup_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Mini App –≤ –º–µ–Ω—é"""
    
    menu_button = MenuButtonWebApp(
        text="ü•ó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url=MINI_APP_URL)
    )
    
    await context.bot.set_chat_menu_button(
        chat_id=update.effective_chat.id,
        menu_button=menu_button
    )
    
    await update.message.reply_text(
        "‚úÖ –ö–Ω–æ–ø–∫–∞ Mini App —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (‚ò∞) —Ä—è–¥–æ–º —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è, "
        "—á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=reply_kb()
    )
# --------------------
# Database init (PostgreSQL)
# --------------------
from db_pg import db as _pgdb

class _CompatDB:
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Ç–µ–∫—É—â–∏–º –∫–æ–¥–æ–º"""
    def __init__(self, inner):
        self._db = inner

    def execute(self, sql: str, params=()):
        sql2 = sql.replace("?", "%s")
        sql2 = sql2.replace("INSERT OR IGNORE INTO achievements", "INSERT INTO achievements")
        sql2 = sql2.replace("INSERT OR REPLACE INTO challenges", "INSERT INTO challenges")
        return self._db.execute(sql2, params)

    def commit(self):
        return self._db.commit()
    
    def rollback(self):
        return self._db.rollback()

db = _CompatDB(_pgdb)

def seed_products_pg():
    base = [
        ("—è–±–ª–æ–∫–æ", 52, 0.3, 0.2, 14),
        ("–±–∞–Ω–∞–Ω", 96, 1.3, 0.3, 23),
        ("—Ä–∏—Å", 360, 7.0, 0.7, 79),
        ("–≥—Ä–µ—á–∫–∞", 343, 13.3, 3.4, 72.6),
        ("–æ–≤—Å—è–Ω–∫–∞", 370, 13, 7, 62),
        ("–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞", 165, 31, 3.6, 0),
        ("—è–π—Ü–æ", 143, 12.6, 10.6, 0.7),
        ("—Ç–≤–æ—Ä–æ–≥ 5%", 121, 17, 5, 1.8),
        ("–º–æ–ª–æ–∫–æ 2.5%", 52, 3.2, 2.5, 4.8),
        ("–æ–ª–∏–≤–∫–æ–≤–æ–µ –º–∞—Å–ª–æ", 884, 0, 100, 0),
        ("–æ–≥—É—Ä–µ—Ü", 15, 0.7, 0.1, 3.6),
        ("–ø–æ–º–∏–¥–æ—Ä", 18, 0.9, 0.2, 3.9),
        ("—Å—ã—Ä –º–æ—Ü–∞—Ä–µ–ª–ª–∞", 280, 18, 21, 3),
    ]
    try:
        for name, kcal, p, f, c in base:
            db.execute(
                "INSERT INTO products (name, kcal_per_100, proteins_per_100, fats_per_100, carbs_per_100) "
                "VALUES (%s,%s,%s,%s,%s) "
                "ON CONFLICT (name) DO NOTHING",
                (name, kcal, p, f, c)
            )
        db.commit()
    except Exception as e:
        logger.exception(f"Error seeding products: {e}")
        db.rollback()

# --------------------
# Utilities
# --------------------
def split_message(text: str, chunk_size: int = 4000) -> List[str]:
    text = text or ""
    return [text[i:i+chunk_size] for i in range(0, len(text), chunk_size)]

def save_user(user_id: int, username: Optional[str]):
    uname = (username or "").lower().lstrip("@")
    try:
        db.execute(
            "INSERT INTO subscriptions (user_id, username) VALUES (%s, %s) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id, uname)
        )
        db.execute(
            "INSERT INTO credits (user_id, labs_credits) VALUES (%s, 0) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        db.execute(
            "INSERT INTO referrals (user_id, ref_code, invited_count) VALUES (%s, %s, 0) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id, secrets.token_urlsafe(6))
        )
        db.commit()
    except Exception as e:
        logger.exception(f"Error saving user {user_id}: {e}")
        db.rollback()

def get_ref_code(user_id: int) -> str:
    row = db.execute("SELECT ref_code FROM referrals WHERE user_id=%s", (user_id,)).fetchone()
    if row and row["ref_code"]:
        return row["ref_code"]
    code = secrets.token_urlsafe(6)
    try:
        db.execute(
            "INSERT INTO referrals (user_id, ref_code, invited_count) VALUES (%s, %s, 0) "
            "ON CONFLICT (user_id) DO UPDATE SET ref_code=EXCLUDED.ref_code",
            (user_id, code)
        )
        db.commit()
    except Exception as e:
        logger.exception(f"Error generating ref code for {user_id}: {e}")
        db.rollback()
    return code

def has_access(user_id: int, username: Optional[str] = None) -> bool:
    if (username or "").lower() == ADMIN_USERNAME and ADMIN_USERNAME:
        return True
    now = dt.datetime.now(dt.timezone.utc)
    row = db.execute("SELECT expires_at, free_until FROM subscriptions WHERE user_id=%s", (user_id,)).fetchone()
    if not row:
        return False
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏
    try:
        exp = row["expires_at"]
        free = row["free_until"]
        
        if exp and isinstance(exp, str):
            exp = dt.datetime.fromisoformat(exp)
        if free and isinstance(free, str):
            free = dt.datetime.fromisoformat(free)
            
        if exp and hasattr(exp, 'tzinfo') and exp.tzinfo is None:
            exp = exp.replace(tzinfo=dt.timezone.utc)
        if free and hasattr(free, 'tzinfo') and free.tzinfo is None:
            free = free.replace(tzinfo=dt.timezone.utc)
            
        if exp and exp > now:
            return True
        if free and free > now:
            return True
    except Exception as e:
        logger.warning(f"Error parsing dates for user {user_id}: {e}")
        return False
    
    return False

def activate_sub(user_id: int, days: int) -> dt.datetime:
    try:
        db.execute(
            "INSERT INTO subscriptions (user_id) VALUES (%s) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        row = db.execute(
            "SELECT expires_at FROM subscriptions WHERE user_id=%s",
            (user_id,)
        ).fetchone()
        now = dt.datetime.now(dt.timezone.utc)
        base = now
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if row and row["expires_at"]:
            try:
                existing = row["expires_at"]
                if isinstance(existing, str):
                    existing = dt.datetime.fromisoformat(existing)
                if hasattr(existing, 'tzinfo') and existing.tzinfo is None:
                    existing = existing.replace(tzinfo=dt.timezone.utc)
                if existing > now:
                    base = existing
            except Exception as e:
                logger.warning(f"Error parsing existing date: {e}")
                base = now
        
        new_exp = base + dt.timedelta(days=days)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º datetime –Ω–∞–ø—Ä—è–º—É—é
        db.execute(
            "UPDATE subscriptions SET expires_at=%s WHERE user_id=%s",
            (new_exp, user_id)
        )
        db.commit()
        return new_exp
    except Exception as e:
        logger.exception(f"Error activating subscription for {user_id}: {e}")
        db.rollback()
        raise

def activate_free_access(user_id: int, trial_hours: int) -> dt.datetime:
    try:
        db.execute(
            "INSERT INTO subscriptions (user_id) VALUES (%s) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        until = dt.datetime.now(dt.timezone.utc) + dt.timedelta(hours=trial_hours)
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º datetime –Ω–∞–ø—Ä—è–º—É—é
        db.execute(
            "UPDATE subscriptions SET free_until=%s WHERE user_id=%s",
            (until, user_id)
        )
        db.commit()
        return until
    except Exception as e:
        logger.exception(f"Error activating free access for {user_id}: {e}")
        db.rollback()
        raise

def add_labs_credit(user_id: int, credit: int = 1):
    try:
        db.execute(
            "INSERT INTO credits (user_id, labs_credits) VALUES (%s, 0) "
            "ON CONFLICT (user_id) DO NOTHING",
            (user_id,)
        )
        db.execute(
            "UPDATE credits SET labs_credits = labs_credits + %s WHERE user_id=%s",
            (credit, user_id)
        )
        db.commit()
    except Exception as e:
        logger.exception(f"Error adding labs credit for {user_id}: {e}")
        db.rollback()

def consume_labs_credit(user_id: int) -> bool:
    try:
        row = db.execute(
            "SELECT labs_credits FROM credits WHERE user_id=%s",
            (user_id,)
        ).fetchone()
        if not row or (row["labs_credits"] or 0) <= 0:
            return False
        db.execute(
            "UPDATE credits SET labs_credits = labs_credits - 1 WHERE user_id=%s",
            (user_id,)
        )
        db.commit()
        return True
    except Exception as e:
        logger.exception(f"Error consuming labs credit for {user_id}: {e}")
        db.rollback()
        return False

def get_labs_credits(user_id: int) -> int:
    row = db.execute(
        "SELECT labs_credits FROM credits WHERE user_id=%s",
        (user_id,)
    ).fetchone()
    return int((row["labs_credits"] if row and row["labs_credits"] is not None else 0))

# --------------------
# Keyboards
# --------------------
BTN_DIARY = "üçΩ –î–Ω–µ–≤–Ω–∏–∫"
BTN_QUESTION = "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"
BTN_TRACKER = "üçΩÔ∏è –¢—Ä–µ–∫–µ—Ä –∫–∞–ª–æ—Ä–∏–π"
BTN_PROFILE = "üë§ –ü—Ä–æ—Ñ–∏–ª—å"

async def send_chunks_with_back(func_send, text: str, parse_mode=ParseMode.HTML, disable_preview=True):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ —á–∞—Å—Ç—è–º —Å –∫–Ω–æ–ø–∫–æ–π –ù–∞–∑–∞–¥"""
    parts = split_message(text)
    for i, part in enumerate(parts):
        html_part = format_ai_html(part)
        kwargs = {
            "text": html_part,
            "parse_mode": parse_mode,
            "disable_web_page_preview": disable_preview,
        }
        if i == len(parts) - 1:
            kwargs["reply_markup"] = back_to_menu_kb()
        await func_send(**kwargs)

def reply_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup([[BTN_DIARY, BTN_TRACKER], [BTN_QUESTION, BTN_PROFILE]], resize_keyboard=True)

def menu_kb() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("ü•ó –ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è", callback_data="plan"),
         InlineKeyboardButton("üß™ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤", callback_data="labs")],
        [InlineKeyboardButton("üç≥ –†–µ—Ü–µ–ø—Ç –∏–∑ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞", callback_data="recipe"),
         InlineKeyboardButton("üçè –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç –ø–æ –ø–∏—Ç–∞–Ω–∏—é", callback_data="nutrition")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
         InlineKeyboardButton("üåô –ö–∞–∫ —É–ª—É—á—à–∏—Ç—å —Å–æ–Ω", callback_data="sleep")],
        [InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"),
         InlineKeyboardButton("‚ö° –ß–µ–ª–ª–µ–Ω–¥–∂–∏", callback_data="challenges")],
        [InlineKeyboardButton("üéÅ –ü—Ä–æ–º–æ–∫–æ–¥", callback_data="promo"),
         InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="referral")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consult"),
         InlineKeyboardButton("üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", callback_data="subscribe")]
    ]
    return InlineKeyboardMarkup(kb)

def plans_kb() -> InlineKeyboardMarkup:
    rows = []
    for p in PLANS:
        title = f"{p['title']} ‚Äî {p['price_minor']//100} ‚ÇΩ"
        rows.append([InlineKeyboardButton(title, callback_data=f"buy:{p['key']}")])
    
    rows.append([InlineKeyboardButton(f"{LABS_ONEOFF['title']} ‚Äî {LABS_ONEOFF['price_minor']//100} ‚ÇΩ", callback_data=f"buy:{LABS_ONEOFF['key']}")])
    rows.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")])
    return InlineKeyboardMarkup(rows)

def challenges_kb() -> InlineKeyboardMarkup:
    challenges = [
        ("üíß –ü–∏—Ç—å 2–ª –≤–æ–¥—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "water_challenge"),
        ("üèÉ 8k —à–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ", "steps_challenge"),
        ("ü•ó –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ 7 –¥–Ω–µ–π", "diet_challenge"),
        ("üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3—Ö –≤ –Ω–µ–¥–µ–ª—é", "workout_challenge"),
        ("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏", "tracking_challenge"),
        ("üö´ –ë–µ–∑ —Å–∞—Ö–∞—Ä–∞ 7 –¥–Ω–µ–π", "nosugar_challenge")
    ]
    kb = []
    for title, key in challenges:
        kb.append([InlineKeyboardButton(title, callback_data=f"challenge:{key}")])
    kb.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")])
    return InlineKeyboardMarkup(kb)

def back_to_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_menu")]])

def labs_purchase_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ö—É–ø–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É –∞–Ω–∞–ª–∏–∑–æ–≤", callback_data="buy:labs_350")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
    ])

def diary_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚ûï –ü—Ä–∏—ë–º –ø–∏—â–∏", callback_data="diary_add_meal"),
         InlineKeyboardButton("üíß –í–æ–¥–∞ +250 –º–ª", callback_data="diary_water")],
        [InlineKeyboardButton("üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="diary_today"),
         InlineKeyboardButton("üìä –ù–µ–¥–µ–ª—è", callback_data="diary_week")],
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π", callback_data="diary_undo")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_menu")]
    ])

# --------------------
# OCR helpers
# --------------------
async def ocr_image_bytes(img_bytes: bytes) -> str:
    try:
        def sync():
            img = Image.open(io.BytesIO(img_bytes)).convert("RGB")
            return pytesseract.image_to_string(img, lang=OCR_LANG).strip()
        return await asyncio.to_thread(sync)
    except Exception as e:
        logger.exception(f"OCR image error: {e}")
        return ""

async def ocr_pdf_bytes(pdf_bytes: bytes) -> str:
    try:
        parts = []
        with pdfplumber.open(io.BytesIO(pdf_bytes)) as pdf:
            for page in pdf.pages:
                t = page.extract_text() or ""
                if t.strip():
                    parts.append(t.strip())
        if parts:
            return "\n\n".join(parts).strip()
    except Exception as e:
        logger.debug(f"pdfplumber text extract error: {e}")
    
    try:
        with tempfile.TemporaryDirectory() as tmpdir:
            path = os.path.join(tmpdir, "input.pdf")
            with open(path, "wb") as f:
                f.write(pdf_bytes)
            subprocess.run(["pdfimages", "-all", path, os.path.join(tmpdir, "page")], check=True)
            ocr_parts = []
            for fname in sorted(os.listdir(tmpdir)):
                if fname.startswith("page"):
                    with open(os.path.join(tmpdir, fname), "rb") as imf:
                        ocr_parts.append(await ocr_image_bytes(imf.read()))
            if any(p.strip() for p in ocr_parts):
                return "\n\n".join([p for p in ocr_parts if p.strip()]).strip()
    except Exception:
        pass
    
    try:
        ocr_parts = []
        with pdfplumber.open(io.BytesIO(pdf_bytes)) as pdf:
            for page in pdf.pages:
                try:
                    img = page.to_image(resolution=150).original
                    buf = io.BytesIO()
                    img.save(buf, format="PNG")
                    ocr_parts.append(await ocr_image_bytes(buf.getvalue()))
                except Exception:
                    pass
        return "\n\n".join([p for p in ocr_parts if p.strip()]).strip()
    except Exception:
        return ""

# --------------------
# Products / BJU calculation
# --------------------
def find_product(name: str) -> Optional[Dict]:
    name = (name or "").strip().lower()
    if not name:
        return None

    row = db.execute(
        "SELECT * FROM products WHERE LOWER(name)=%s",
        (name,)
    ).fetchone()
    if row:
        return row

    row = db.execute(
        "SELECT * FROM products WHERE LOWER(name) LIKE %s ORDER BY LENGTH(name) LIMIT 1",
        (f"%{name}%",)
    ).fetchone()
    return row

def calc_nutrition_for_item(prod: Mapping[str, float], grams: float) -> Dict[str, float]:
    k = float(grams) / 100.0
    return {
        "kcal": float(prod["kcal_per_100"]) * k,
        "p": float(prod["proteins_per_100"]) * k,
        "f": float(prod["fats_per_100"]) * k,
        "c": float(prod["carbs_per_100"]) * k,
    }

def parse_meal_lines_from_text(text: str) -> List[Tuple[str, float]]:
    items: List[Tuple[str, float]] = []
    for line in re.split(r"[\n;,]+", text):
        line = line.strip()
        if not line:
            continue
        m = re.search(r"([a-zA-Z–∞-—è—ë0-9\s\-\%]+?)\s+(\d+(?:[.,]\d+)?)\s*(–≥|–≥—Ä|g|–º–ª|ml)?\b", line, re.I)
        if m:
            name = m.group(1).strip()
            qty = float(m.group(2).replace(",", "."))
            grams = qty
            items.append((name, grams))
    return items

def try_estimate_meal_from_db(meal_text: str) -> Optional[Tuple[int, float, float, float, str]]:
    items = parse_meal_lines_from_text(meal_text)
    if not items:
        return None
    total = {"kcal":0.0,"p":0.0,"f":0.0,"c":0.0}
    lines = []
    matched_any = False
    for name, grams in items:
        prod = find_product(name)
        if not prod:
            lines.append(f"‚Ä¢ <i>{html.escape(name)}</i> ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ")
            continue
        matched_any = True
        n = calc_nutrition_for_item(prod, grams)
        total["kcal"] += n["kcal"]
        total["p"] += n["p"]
        total["f"] += n["f"]
        total["c"] += n["c"]
        lines.append(f"‚Ä¢ {html.escape(prod['name'])} ‚Äî {int(round(grams))} –≥ ‚Üí {int(round(n['kcal']))} –∫–∫–∞–ª | –ë {n['p']:.1f} –ñ {n['f']:.1f} –£ {n['c']:.1f}")
    if not matched_any:
        return None
    summary = "<br>".join(lines)
    return int(round(total["kcal"])), round(total["p"],1), round(total["f"],1), round(total["c"],1), summary

# --------------------
# –ò–°–ü–†–ê–í–õ–ï–ù–û: Format AI responses to HTML
# --------------------
def format_ai_html(text: str) -> str:
    """
    –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–¥–∞–ª—è–µ—Ç markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏ ### –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç
    """
    if not text:
        return ""

    # –£–±–∏—Ä–∞–µ–º –∑–≤—ë–∑–¥–æ—á–∫–∏
    s = text.replace("*", "")
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±–∏—Ä–∞–µ–º markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏ (###, ##, #)
    s = re.sub(r'^#{1,6}\s+', '', s, flags=re.MULTILINE)
    s = s.replace("\r\n", "\n").replace("\r", "\n")
    s = html.escape(s)

    lines = s.split("\n")
    out = []

    for ln in lines:
        ln = ln.strip()
        if not ln:
            out.append("")
            continue

        # –ë—É–ª–ª–µ—Ç-—Å–ø–∏—Å–∫–∏
        if ln.startswith(("‚Ä¢", "-", "‚Äì")):
            item = ln.lstrip("‚Ä¢-‚Äì ").strip()
            out.append(f"‚Ä¢ {item}")
        else:
            # –ó–∞–≥–æ–ª–æ–≤–∫–∏: –æ—Å—Ç–∞–≤–ª—è–µ–º –∂–∏—Ä–Ω—ã–º
            if ln.endswith(":") or (ln.upper() == ln and len(ln) <= 60 and " " in ln):
                out.append(f"<b>{ln}</b>")
            else:
                out.append(ln)

    return "\n".join(out)

# --------------------
# Daily reminder for food tracking
# --------------------
async def schedule_daily_reminders(app: Application):
    """Schedule daily reminders for all users to track their meals"""
    now_utc = dt.datetime.now(dt.timezone.utc)
    users = db.execute("SELECT user_id FROM subscriptions WHERE expires_at > %s OR free_until > %s", 
                      (now_utc, now_utc)).fetchall()
    
    for user in users:
        user_id = user["user_id"]
        reminder_time = now_utc.replace(hour=10, minute=0, second=0, microsecond=0)
        if reminder_time < now_utc:
            reminder_time += dt.timedelta(days=1)
        
        delay = (reminder_time - now_utc).total_seconds()
        app.job_queue.run_once(
            send_daily_reminder, 
            when=delay, 
            data={"user_id": user_id},
            name=f"daily_reminder_{user_id}"
        )

async def send_daily_reminder(context: ContextTypes.DEFAULT_TYPE):
    data = context.job.data
    user_id = data.get("user_id")
    
    if not user_id:
        return
        
    try:
        text = (
            "üçΩ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ</b>\n\n"
            "–ù–µ –∑–∞–±—É–¥—å –≤–Ω–µ—Å—Ç–∏ —Å–≤–æ–∏ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è! "
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞—Ü–∏–æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –¥–æ—Å—Ç–∏—á—å —Ç–≤–æ–∏—Ö —Ü–µ–ª–µ–π –±—ã—Å—Ç—Ä–µ–µ. üí™\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É ¬´üçΩÔ∏è –¢—Ä–µ–∫–µ—Ä –∫–∞–ª–æ—Ä–∏–π¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ —Ç—ã —Å—ä–µ–ª(–∞)."
        )
        await context.bot.send_message(chat_id=user_id, text=text, parse_mode=ParseMode.HTML)
    except Exception as e:
        logger.warning(f"Failed to send daily reminder to user {user_id}: {e}")

# --------------------
# ML-based recommendations
# --------------------
def generate_ml_recommendations(user_id: int) -> str:
    """Generate personalized recommendations based on user's history"""
    try:
        meals = db.execute(
            "SELECT calories, proteins, fats, carbs, ts FROM meals WHERE user_id = %s ORDER BY ts DESC LIMIT 30",
            (user_id,)
        ).fetchall()
        
        if not meals or len(meals) < 7:
            return "–ü–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!"
        
        calories = [meal["calories"] or 0 for meal in meals]
        proteins = [meal["proteins"] or 0 for meal in meals]
        fats = [meal["fats"] or 0 for meal in meals]
        carbs = [meal["carbs"] or 0 for meal in meals]
        
        avg_calories = statistics.mean(calories) if len(calories) > 1 else calories[0]
        avg_proteins = statistics.mean(proteins) if len(proteins) > 1 else proteins[0]
        avg_fats = statistics.mean(fats) if len(fats) > 1 else fats[0]
        avg_carbs = statistics.mean(carbs) if len(carbs) > 1 else carbs[0]
        
        recommendations = []
        
        if avg_calories > 2500:
            recommendations.append("üìâ –í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –≤—ã—à–µ –Ω–æ—Ä–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ä—Ü–∏–∏.")
        elif avg_calories < 1500:
            recommendations.append("üìà –í–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∫–∞–ª–æ—Ä–∏–π –Ω–∏–∂–µ –Ω–æ—Ä–º—ã. –£–≤–µ–ª–∏—á—å—Ç–µ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ä–∞—Ü–∏–æ–Ω–∞.")
        
        if avg_proteins < 60:
            recommendations.append("ü•© –£–≤–µ–ª–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–ª–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã.")
        
        if avg_fats > 80:
            recommendations.append("ü•ë –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –∂–∏—Ä–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö.")
        
        if avg_carbs > 300:
            recommendations.append("üçû –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —É–≥–ª–µ–≤–æ–¥–æ–≤, –æ—Å–æ–±–µ–Ω–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö.")
        
        if not recommendations:
            recommendations.append("–í–∞—à —Ä–∞—Ü–∏–æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")
        
        return "\n".join(recommendations)
        
    except Exception as e:
        logger.exception(f"Error generating ML recommendations: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è!"

# --------------------
# Challenge functions
# --------------------
def init_challenge(user_id: int, challenge_type: str) -> bool:
    """Initialize a challenge for user (idempotent)"""
    try:
        start_date = dt.datetime.now(dt.timezone.utc)
        db.execute(
            "INSERT INTO challenges (user_id, challenge_type, start_date, progress, completed) "
            "VALUES (%s, %s, %s, 0, 0) "
            "ON CONFLICT (user_id, challenge_type) DO UPDATE "
            "SET start_date = EXCLUDED.start_date, progress = LEAST(challenges.progress, 7), completed = LEAST(challenges.completed, 1)",
            (user_id, challenge_type, start_date)
        )
        db.commit()
        return True
    except Exception as e:
        logger.exception(f"Error initializing challenge: {e}")
        db.rollback()
        return False

def update_challenge_progress(user_id: int, challenge_type: str) -> bool:
    """Update challenge progress for user"""
    try:
        today = dt.datetime.now(dt.timezone.utc).date().isoformat()
        
        existing = db.execute(
            "SELECT 1 FROM challenge_logs WHERE user_id=%s AND challenge_type=%s AND log_date=%s",
            (user_id, challenge_type, today)
        ).fetchone()
        
        if existing:
            return False
        
        db.execute(
            "INSERT INTO challenge_logs (user_id, challenge_type, log_date, completed) VALUES (%s, %s, %s, 1)",
            (user_id, challenge_type, today)
        )
        
        db.execute(
            "UPDATE challenges SET progress = progress + 1 WHERE user_id=%s AND challenge_type=%s",
            (user_id, challenge_type)
        )
        
        challenge = db.execute(
            "SELECT progress FROM challenges WHERE user_id=%s AND challenge_type=%s",
            (user_id, challenge_type)
        ).fetchone()
        
        challenge_days = 7
        
        if challenge and challenge["progress"] >= challenge_days:
            db.execute(
                "UPDATE challenges SET completed = 1 WHERE user_id=%s AND challenge_type=%s",
                (user_id, challenge_type)
            )
            
            achievement_name = f"–ß–µ–ª–ª–µ–Ω–¥–∂: {get_challenge_name(challenge_type)}"
            db.execute(
                "INSERT INTO achievements (user_id, badge, ts) VALUES (%s, %s, %s)",
                (user_id, achievement_name, dt.datetime.now(dt.timezone.utc))
            )
        
        db.commit()
        return True
        
    except Exception as e:
        logger.exception(f"Error updating challenge progress: {e}")
        db.rollback()
        return False

def get_challenge_name(challenge_type: str) -> str:
    """Get display name for challenge type"""
    names = {
        "water_challenge": "–ü–∏—Ç—å 2–ª –≤–æ–¥—ã daily",
        "steps_challenge": "8k —à–∞–≥–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
        "diet_challenge": "–ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ 7 –¥–Ω–µ–π",
        "workout_challenge": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3—Ö –≤ –Ω–µ–¥–µ–ª—é",
        "tracking_challenge": "–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏",
        "nosugar_challenge": "–ë–µ–∑ —Å–∞—Ö–∞—Ä–∞ 7 –¥–Ω–µ–π"
    }
    return names.get(challenge_type, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂")

def get_challenge_progress(user_id: int, challenge_type: str) -> Tuple[int, int]:
    """Get current progress for a challenge (current/total)"""
    challenge = db.execute(
        "SELECT progress FROM challenges WHERE user_id=%s AND challenge_type=%s",
        (user_id, challenge_type)
    ).fetchone()
    
    if not challenge:
        return 0, 7
    
    return challenge["progress"], 7

# --------------------
# –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞–∑–±–∏–µ–Ω–∏–µ on_menu_callback –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# --------------------

async def handle_subscribe_callback(query, context):
    """Handle subscription menu"""
    if not PAYMENT_TOKEN:
        await query.message.reply_text("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", reply_markup=reply_kb())
        return

    if not PLANS:
        await query.message.reply_text("–¢–∞—Ä–∏—Ñ—ã –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.", reply_markup=reply_kb())
        return

    lines = ["üí∞ <b>–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:</b>", ""]
    base_daily = (PLANS[0]["price_minor"] / max(1, PLANS[0]["days"])) / 100

    for plan in PLANS:
        daily_price = (plan["price_minor"] / max(1, plan["days"])) / 100
        economy = int(round((1 - (daily_price / base_daily)) * 100)) if base_daily else 0

        line = f"‚Ä¢ {plan['title']}: {plan['price_minor']//100} —Ä—É–±. ({daily_price:.2f} —Ä—É–±./–¥–µ–Ω—å)"
        if economy > 0:
            line += f" ‚Üê —ç–∫–æ–Ω–æ–º–∏—è {economy}%"
        lines.append(line)

    comparison_text = "\n".join(lines)
    await query.message.reply_text(comparison_text, parse_mode=ParseMode.HTML)
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:", reply_markup=plans_kb())

async def handle_sleep_callback(query, context):
    """Handle sleep advice"""
    await query.message.reply_text(
        "üåô <b>–°–æ–≤–µ—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–Ω–∞:</b>\n\n"
        "‚Ä¢ –°–æ–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–Ω–∞\n"
        "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π —Ä–∏—Ç—É–∞–ª –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
        "‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –∫–æ—Ñ–µ–∏–Ω–∞ –∏ —Ç—è–∂–µ–ª–æ–π –ø–∏—â–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
        "‚Ä¢ –û–±–µ—Å–ø–µ—á—å—Ç–µ —Ç–µ–º–Ω–æ—Ç—É –∏ —Ç–∏—à–∏–Ω—É –≤ —Å–ø–∞–ª—å–Ω–µ\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º\n"
        "‚Ä¢ –û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º",
        parse_mode=ParseMode.HTML,
        reply_markup=back_to_menu_kb()
    )

async def handle_buy_callback(query, context, key: str):
    """Handle purchase requests"""
    if not PAYMENT_TOKEN:
        await query.message.reply_text("–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞.", reply_markup=reply_kb())
        return
    
    if key == LABS_ONEOFF["key"]:
        prices = [LabeledPrice(LABS_ONEOFF["title"], LABS_ONEOFF["price_minor"])]
        await query.message.reply_invoice(
            title=LABS_ONEOFF["title"], description="–†–∞–∑–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–Ω–∞–ª–∏–∑–æ–≤",
            provider_token=PAYMENT_TOKEN, currency=CURRENCY, prices=prices, payload="pay:labs_oneoff"
        )
        return
    
    plan = next((p for p in PLANS if p["key"] == key), None)
    if not plan:
        await query.message.reply_text("–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_kb())
        return
    
    prices = [LabeledPrice(plan["title"], plan["price_minor"])]
    await query.message.reply_invoice(
        title=plan["title"], description=f"–ü–æ–¥–ø–∏—Å–∫–∞ {plan['days']} –¥–Ω–µ–π",
        provider_token=PAYMENT_TOKEN, currency=CURRENCY, prices=prices, payload=f"pay:sub:{plan['key']}"
    )

async def handle_consult_callback(query, context):
    """Handle consultation info"""
    await query.message.reply_text(
        "üë©‚Äç‚öïÔ∏è <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∞</b>\n\n"
        "–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Ä–µ–≤–µ–Ω—Ç–∏–≤–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥–∏–∏.\n"
        "–í —Ä–∞–º–∫–∞—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —è –ø–æ–º–æ–≥—É:\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã –∏ –≤—ã—è–≤–∏—Ç—å –Ω—É—Ç—Ä–∏—Ç–∏–≤–Ω—ã–µ –¥–µ—Ñ–∏—Ü–∏—Ç—ã\n"
        "‚Ä¢ –°–æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –ø–∏—â–µ–≤–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è\n"
        "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π\n\n"
        "üìû –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: @Tatiana_Lekh\n\n"
        "<i>–ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - –ª—É—á—à–∞—è –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è!</i>",
        parse_mode=ParseMode.HTML,
        reply_markup=back_to_menu_kb()
    )

async def handle_labs_callback(query, context, user):
    """Handle labs analysis request"""
    clear_modes(context)
    is_admin = (user.username or "").lower() == ADMIN_USERNAME and ADMIN_USERNAME
    if is_admin:
        context.user_data[EXPECT_LABS] = True
        await query.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/PDF —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏.", reply_markup=back_to_menu_kb())
        return
    
    row = db.execute("SELECT used_free_lab FROM subscriptions WHERE user_id=%s", (user.id,)).fetchone()
    if not row or not row["used_free_lab"]:
        db.execute("UPDATE subscriptions SET used_free_lab=1 WHERE user_id=%s", (user.id,))
        db.commit()
        context.user_data[EXPECT_LABS] = True
        await query.message.reply_text("üéÅ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–∏—à–ª–∏ –∞–Ω–∞–ª–∏–∑—ã.", reply_markup=back_to_menu_kb())
        return
    
    credits = get_labs_credits(user.id)
    if credits <= 0:
        await query.message.reply_text(
            f"–†–∞–∑–æ–≤–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —Å—Ç–æ–∏—Ç {LABS_ONEOFF['price_minor']//100} ‚ÇΩ.",
            reply_markup=labs_purchase_kb()
        )
        return
    
    context.user_data[EXPECT_LABS] = True
    await query.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/PDF —Å –∞–Ω–∞–ª–∏–∑–∞–º–∏.", reply_markup=back_to_menu_kb())

async def handle_achievements_callback(query, context, user):
    """Handle achievements display"""
    rows = db.execute("SELECT badge, ts FROM achievements WHERE user_id=%s ORDER BY ts DESC", (user.id,)).fetchall()
    if not rows:
        await query.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. –ó–∞–ø–æ–ª–Ω—è–π –¥–Ω–µ–≤–Ω–∏–∫ –∏ —É—á–∞—Å—Ç–≤—É–π –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö!", reply_markup=back_to_menu_kb())
        return
    lines = [f"üèÖ {r['badge']} ‚Äî {r['ts'][:10]}" for r in rows]
    await query.message.reply_text("–¢–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:\n" + "\n".join(lines), reply_markup=back_to_menu_kb())

async def handle_challenges_callback(query, context):
    """Handle challenges menu"""
    await query.message.reply_text(
        "‚ö° <b>–í—ã–±–µ—Ä–∏ —á–µ–ª–ª–µ–Ω–¥–∂</b>\n\n"
        "–£—á–∞—Å—Ç–≤—É–π –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö –∏ –ø–æ–ª—É—á–∞–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è! "
        "–û—Ç–º–µ—á–∞–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞.",
        reply_markup=challenges_kb(), parse_mode=ParseMode.HTML
    )

async def handle_challenge_detail(query, context, user, challenge_type: str):
    """Handle individual challenge details"""
    challenge_name = get_challenge_name(challenge_type)
    
    init_challenge(user.id, challenge_type)
    
    progress, total = get_challenge_progress(user.id, challenge_type)
    
    await query.message.reply_text(
        f"‚ö° <b>–ß–µ–ª–ª–µ–Ω–¥–∂: {challenge_name}</b>\n\n"
        f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{total} –¥–Ω–µ–π\n\n"
        "–û—Ç–º–µ—á–∞–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–µ–ª–ª–µ–Ω–¥–∂–∞!",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", callback_data=f"challenge_log:{challenge_type}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º", callback_data="challenges")]
        ])
    )

async def handle_challenge_log(query, context, user, challenge_type: str):
    """Handle logging challenge progress"""
    challenge_name = get_challenge_name(challenge_type)
    
    if update_challenge_progress(user.id, challenge_type):
        progress, total = get_challenge_progress(user.id, challenge_type)
        
        if progress >= total:
            await query.message.reply_text(
                f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª(–∞) —á–µ–ª–ª–µ–Ω–¥–∂ ¬´{challenge_name}¬ª!\n"
                "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.",
                reply_markup=back_to_menu_kb()
            )
        else:
            await query.message.reply_text(
                f"‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–º–µ—á–µ–Ω! –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{total} –¥–Ω–µ–π",
                reply_markup=back_to_menu_kb()
            )
    else:
        await query.message.reply_text(
            "‚ùå –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –æ—Ç–º–µ—á–∞–ª(–∞) —ç—Ç–æ—Ç —á–µ–ª–ª–µ–Ω–¥–∂. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞!",
            reply_markup=back_to_menu_kb()
        )

async def handle_diary_callbacks(query, context, user, action: str):
    """Handle diary-related callbacks"""
    if action == "add_meal":
        clear_modes(context)
        context.user_data[EXPECT_MEAL] = True
        await query.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å –ø—Ä–∏—ë–º –ø–∏—â–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫:\n"
            "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 150 –≥\n—Ä–∏—Å 70 –≥\n(–∏–ª–∏ —Ñ–æ—Ç–æ/—á–µ–∫).",
            reply_markup=back_to_menu_kb()
        )
    elif action == "water":
        now = dt.datetime.now(dt.timezone.utc)
        db.execute(
            "INSERT INTO meals (user_id, ts, text, calories, proteins, fats, carbs) "
            "VALUES (%s, %s, %s, %s, %s, %s, %s)",
            (user.id, now, "–≤–æ–¥–∞ 250 –º–ª", 0, 0.0, 0.0, 0.0)
        )
        db.commit()
        await query.message.reply_text("üíß –ó–∞–ø–∏—Å–∞–ª: –≤–æ–¥–∞ +250 –º–ª.", reply_markup=diary_kb())
    elif action == "undo":
        row = db.execute(
            "SELECT id FROM meals WHERE user_id=%s ORDER BY ts DESC LIMIT 1", (user.id,)
        ).fetchone()
        if not row:
            await query.message.reply_text("–û—Ç–º–µ–Ω—è—Ç—å –Ω–µ—á–µ–≥–æ ‚Äî –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", reply_markup=diary_kb())
            return
        db.execute("DELETE FROM meals WHERE id=%s", (row["id"],))
        db.commit()
        await query.message.reply_text("–ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.", reply_markup=diary_kb())

async def on_menu_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Main callback router - delegates to specific handlers"""
    query = update.callback_query
    if query:
        await query.answer()
    
    data = (query.data if query else None) or ""
    user = query.from_user if query else update.effective_user
    
    # Clear flags helper
    def reset_flags():
        for k in (EXPECT_LABS, EXPECT_RECIPE, EXPECT_QUESTION, EXPECT_MEAL, EXPECT_WEIGHT):
            context.user_data[k] = False
    
    # Route to specific handlers
    if data == "back_menu":
        await query.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=menu_kb())
        return
    
    if data == "subscribe":
        await handle_subscribe_callback(query, context)
        return
    
    if data == "sleep":
        await handle_sleep_callback(query, context)
        return
    
    if data.startswith("buy:"):
        key = data.split(":", 1)[1]
        await handle_buy_callback(query, context, key)
        return
    
    if data == "consult":
        await handle_consult_callback(query, context)
        return
    
    if data == "plan":
        if not has_access(user.id, user.username):
            await query.message.reply_text("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
            return
        reset_flags()
        await query.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?", reply_markup=back_to_menu_kb())
        return PLAN_AGE
    
    if data == "labs":
        await handle_labs_callback(query, context, user)
        return
    
    if data == "recipe":
        if not has_access(user.id, user.username):
            await query.message.reply_text("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞/–ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.", reply_markup=reply_kb())
            return
        reset_flags()
        context.user_data[EXPECT_RECIPE] = True
        await query.message.reply_text("–ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–∞ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ (—Ç–µ–∫—Å—Ç–æ–º).", reply_markup=back_to_menu_kb())
        return
    
    if data == "question":
        if not has_access(user.id, user.username):
            await query.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ/–ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
            return
        reset_flags()
        context.user_data[EXPECT_QUESTION] = True
        await query.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å (–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ).", reply_markup=back_to_menu_kb())
        return
    
    if data == "nutrition":
        await query.message.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ –ø–∏—Ç–∞–Ω–∏–∏ –∏–ª–∏ –æ—Ç–∫—Ä–æ–π –º–µ–Ω—é.", reply_markup=back_to_menu_kb())
        return
    
    if data in ("diary_today", "diary_week"):
        period = "week" if data.endswith("week") else "today"
        await show_diary(update, context, period=period)
        return
    
    if data == "diary_add_meal":
        await handle_diary_callbacks(query, context, user, "add_meal")
        return
    
    if data == "diary_undo":
        await handle_diary_callbacks(query, context, user, "undo")
        return
    
    if data == "diary_water":
        await handle_diary_callbacks(query, context, user, "water")
        return
    
    if data == "achievements":
        await handle_achievements_callback(query, context, user)
        return
    
    if data == "challenges":
        await handle_challenges_callback(query, context)
        return
    
    if data.startswith("challenge:"):
        challenge_type = data.split(":", 1)[1]
        await handle_challenge_detail(query, context, user, challenge_type)
        return
    
    if data.startswith("challenge_log:"):
        challenge_type = data.split(":", 1)[1]
        await handle_challenge_log(query, context, user, challenge_type)
        return
    
    if data == "promo":
        await query.message.reply_text("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: /promo –ö–û–î", reply_markup=reply_kb())
        return
    
    if data == "referral":
        code = get_ref_code(user.id)
        bot_me = await context.bot.get_me()
        link = f"t.me/{bot_me.username}?start={code}"
        await query.message.reply_text(
            f"üë• <b>–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ +{REF_BONUS_DAYS} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n\n"
            f"–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–≥—É. –ö–æ–≥–¥–∞ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ –Ω–µ–π, —Ç—ã –ø–æ–ª—É—á–∏—à—å –±–æ–Ω—É—Å–Ω—ã–µ –¥–Ω–∏ –ø–æ–¥–ø–∏—Å–∫–∏!",
            parse_mode=ParseMode.HTML,
            reply_markup=back_to_menu_kb()
        )
        return
    
    if data == "stats":
        if not has_access(user.id, user.username):
            await query.message.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ/–ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
            return
        await send_stats(user.id, query.message)
        return
    
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø—Ü–∏—è.", reply_markup=reply_kb())

# --------------------
# Handlers (start/menu/plan/labs/recipes/meals/etc.)
# --------------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    save_user(user.id, user.username)

async def setup_menu_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É Mini App –≤ –º–µ–Ω—é"""
    web_app_url = os.getenv("MINI_APP_URL", "https://your-domain.com")
    
    menu_button = MenuButtonWebApp(
        text="ü•ó –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url=web_app_url)
    )
    
    await context.bot.set_chat_menu_button(
        chat_id=update.effective_chat.id,
        menu_button=menu_button
    )


    # referral parameter handling
    if context.args:
        code = (context.args[0] or "").strip()
        if code:
            row = db.execute("SELECT user_id FROM referrals WHERE ref_code=%s", (code,)).fetchone()
            inviter_id = row["user_id"] if row else None
            if inviter_id and inviter_id != user.id:
                act = db.execute(
                    "SELECT 1 FROM referral_activations WHERE invited_id=%s",
                    (user.id,)
                ).fetchone()
                if not act:
                    try:
                        db.execute(
                            "INSERT INTO referral_activations (inviter_id, invited_id) VALUES (%s, %s) "
                            "ON CONFLICT (inviter_id, invited_id) DO NOTHING",
                            (inviter_id, user.id)
                        )
                        db.execute(
                            "UPDATE referrals SET invited_count = COALESCE(invited_count,0) + 1 "
                            "WHERE user_id=%s",
                            (inviter_id,)
                        )
                        activate_sub(inviter_id, REF_BONUS_DAYS)
                        db.commit()
                        try:
                            await context.bot.send_message(inviter_id, f"üéâ –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–æ +{REF_BONUS_DAYS} –¥–Ω–µ–π –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ.")
                        except Exception:
                            pass
                    except Exception as e:
                        logger.exception(f"Error processing referral: {e}")
                        db.rollback()

    # trial activation for non-admin
    is_admin = (user.username or "").lower() == ADMIN_USERNAME and ADMIN_USERNAME
    row = db.execute("SELECT free_until FROM subscriptions WHERE user_id=%s", (user.id,)).fetchone()
    if not is_admin and (row is None or not row["free_until"]):
        until = activate_free_access(user.id, TRIAL_HOURS)
        try:
            await update.message.reply_text(f"üéÅ –ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ {TRIAL_HOURS} —á (–¥–æ {until.strftime('%d.%m.%Y %H:%M UTC')}).")
        except Exception:
            pass

    # Generate referral link
    ref_code = get_ref_code(user.id)
    bot_me = await context.bot.get_me()
    ref_link = f"t.me/{bot_me.username}?start={ref_code}"

    caption = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –±–æ—Ç-–Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥.\n\n"
        "–Ø —É–º–µ—é:\n"
        "‚Ä¢ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã –ø–∏—Ç–∞–Ω–∏—è\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã –ø–æ —Ñ–æ—Ç–æ/PDF (–∑–∞ —Ä–∞–∑–æ–≤—É—é –æ–ø–ª–∞—Ç—É)\n"
        "‚Ä¢ –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã –∏–∑ —Ç–æ–≥–æ, —á—Ç–æ –µ—Å—Ç—å –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ\n"
        "‚Ä¢ –í–µ—Å—Ç–∏ –¥–Ω–µ–≤–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–¥—Å—á—ë—Ç–æ–º –ë–ñ–£/–∫–∫–∞–ª\n"
        "‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏ –º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å\n\n"
        f"–ü–æ–¥–µ–ª–∏—Å—å –±–æ—Ç–æ–º —Å –¥—Ä—É–≥–æ–º: {ref_link}\n\n"
        "‚ö†Ô∏è –ë–æ—Ç –Ω–µ —Å—Ç–∞–≤–∏—Ç –¥–∏–∞–≥–Ω–æ–∑—ã –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞."
    )
    try:
        await update.message.reply_photo(photo=WELCOME_IMAGE, caption=caption, reply_markup=menu_kb())
    except Exception:
        await update.message.reply_text(caption, reply_markup=menu_kb())
    await update.message.reply_text("¬´–ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å üí¨ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ ‚¨ÜÔ∏è‚¨áÔ∏è¬ª", reply_markup=reply_kb())

async def show_diary(update: Update, context: ContextTypes.DEFAULT_TYPE, period: str = "today"):
    target = update.message if update.message else update.callback_query.message
    user_id = update.effective_user.id

    now = dt.datetime.now(dt.timezone.utc)
    if period == "week":
        since = (now - dt.timedelta(days=7))
        rows = db.execute(
            "SELECT ts, text, calories, proteins, fats, carbs FROM meals "
            "WHERE user_id=%s AND ts>=%s ORDER BY ts DESC", (user_id, since)
        ).fetchall()
        title = "üìä –î–Ω–µ–≤–Ω–∏–∫ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π"
    else:
        start = dt.datetime.combine(now.date(), dt.time.min).replace(tzinfo=dt.timezone.utc)
        end = start + dt.timedelta(days=1)
        rows = db.execute(
            "SELECT ts, text, calories, proteins, fats, carbs FROM meals "
            "WHERE user_id=%s AND ts>=%s AND ts<%s ORDER BY ts DESC", (user_id, start, end)
        ).fetchall()
        title = "üçΩ –î–Ω–µ–≤–Ω–∏–∫ ‚Äî —Å–µ–≥–æ–¥–Ω—è"

    if not rows:
        await target.reply_text(
            f"{title}\n\n–ü–æ–∫–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.\n–ù–∞–∂–º–∏ ¬´‚ûï –ü—Ä–∏—ë–º –ø–∏—â–∏¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç/—Ñ–æ—Ç–æ/—á–µ–∫.",
            reply_markup=diary_kb()
        )
        return

    total_kcal = 0
    p = f = c = 0.0
    lines = []
    for r in rows:
        total_kcal += int(r["calories"] or 0)
        p += float(r["proteins"] or 0)
        f += float(r["fats"] or 0)
        c += float(r["carbs"] or 0)
        try:
            ts_obj = r["ts"]
            if isinstance(ts_obj, str):
                ts_obj = dt.datetime.fromisoformat(ts_obj)
            hhmm = ts_obj.strftime("%H:%M")
        except Exception:
            hhmm = str(r["ts"])[:16]
        txt = (r["text"] or "").strip()
        lines.append(f"‚Ä¢ {hhmm} ‚Äî {txt} ({int(r['calories'] or 0)} –∫–∫–∞–ª)")

    summary = (
        f"{title}\n\n"
        + "\n".join(lines[:30])
        + "\n\n"
        + f"–ò—Ç–æ–≥–æ: {total_kcal} –∫–∫–∞–ª, –ë/–ñ/–£: {round(p)}/{round(f)}/{round(c)} –≥"
    )
    await target.reply_text(summary, reply_markup=diary_kb())

# --------------------
# Plan conversation handlers
# --------------------
async def plan_start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not has_access(update.effective_user.id, update.effective_user.username):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ/–ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
        return ConversationHandler.END
    await update.message.reply_text("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    return PLAN_AGE

async def plan_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get(EXPECT_QUESTION) or context.user_data.get(EXPECT_LABS) or context.user_data.get(EXPECT_MEAL):
        return ConversationHandler.END
    age = (update.message.text or "").strip()

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if not age.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return PLAN_AGE
    
    age_int = int(age)
    if not (1 <= age_int <= 120):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (1-120 –ª–µ—Ç).")
        return PLAN_AGE
    
    context.user_data["age"] = age_int
    kb = ReplyKeyboardMarkup([["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–ü–æ–ª:", reply_markup=kb)
    return PLAN_SEX

async def plan_sex(update: Update, context: ContextTypes.DEFAULT_TYPE):
    sex = (update.message.text or "").strip().lower()
    if sex not in ("–º—É–∂—Å–∫–æ–π", "–∂–µ–Ω—Å–∫–∏–π"):
        await update.message.reply_text("–í—ã–±–µ—Ä–∏: –ú—É–∂—Å–∫–æ–π –∏–ª–∏ –ñ–µ–Ω—Å–∫–∏–π.")
        return PLAN_SEX
    context.user_data["sex"] = "male" if sex == "–º—É–∂—Å–∫–æ–π" else "female"
    await update.message.reply_text("–í–µ—Å (–∫–≥):", reply_markup=reply_kb())
    return PLAN_WEIGHT

async def plan_weight(update: Update, context: ContextTypes.DEFAULT_TYPE):
    weight = (update.message.text or "").strip()
    try:
        weight_float = float(weight.replace(",", "."))
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not (20 <= weight_float <= 300):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (20-300 –∫–≥).")
            return PLAN_WEIGHT
        context.user_data["weight"] = weight_float
    except Exception:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –≤–µ—Å —á–∏—Å–ª–æ–º.")
        return PLAN_WEIGHT
    await update.message.reply_text("–†–æ—Å—Ç (—Å–º):")
    return PLAN_HEIGHT

async def plan_height(update: Update, context: ContextTypes.DEFAULT_TYPE):
    height = (update.message.text or "").strip()
    try:
        height_float = float(height.replace(",", "."))
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
        if not (100 <= height_float <= 250):
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (100-250 —Å–º).")
            return PLAN_HEIGHT
        context.user_data["height"] = height_float
    except Exception:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º.")
        return PLAN_HEIGHT
    
    kb = ReplyKeyboardMarkup([
        ["–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
        ["–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"],
        ["–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]
    ], one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text(
        "–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n"
        "‚Ä¢ –°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: –º–∏–Ω–∏–º—É–º –¥–≤–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ª–µ–≥–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è 1-3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-5 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 6-7 —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n"
        "‚Ä¢ –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–ø–æ—Ä—Ç—Å–º–µ–Ω—ã",
        reply_markup=kb
    )
    return PLAN_ACTIVITY

async def plan_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    activity = (update.message.text or "").strip()
    context.user_data["activity"] = activity
    await update.message.reply_text("–¶–µ–ª—å (—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞ / –Ω–∞–±–æ—Ä / –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ):")
    return PLAN_GOAL

async def plan_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    goal = (update.message.text or "").strip()
    if not goal:
        await update.message.reply_text("–£–∫–∞–∂–∏ —Ü–µ–ª—å.")
        return PLAN_GOAL
    context.user_data["goal"] = goal
    await update.message.reply_text("–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è/–∞–ª–ª–µ—Ä–≥–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):")
    return PLAN_PREFS

async def plan_prefs(update: Update, context: ContextTypes.DEFAULT_TYPE):
    prefs = (update.message.text or "").strip()
    context.user_data["prefs"] = prefs
    await update.message.reply_text("–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è/–∑–∞–ø—Ä–µ—Ç—ã (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'):")
    return PLAN_RESTR

async def plan_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    restr = (update.message.text or "").strip()
    context.user_data["restr"] = restr
    u = context.user_data
    await update.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω ‚Äî —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É –º–∏–Ω—É—Ç...")
    
    # Calculate BMR and recommended calories
    age = u.get('age', 30)
    weight = u.get('weight', 70)
    height = u.get('height', 170)
    sex = u.get('sex', 'male')
    activity = u.get('activity', '–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å')
    goal = u.get('goal', '–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ')
    
    if sex == 'male':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    
    activity_multipliers = {
        "–°–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏": 1.2,
        "–õ–µ–≥–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.375,
        "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.55,
        "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.725,
        "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 1.9
    }
    multiplier = activity_multipliers.get(activity, 1.55)
    
    goal_adjustments = {
        "—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞": 0.85,
        "–ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ": 1.0,
        "–Ω–∞–±–æ—Ä": 1.15
    }
    adjustment = goal_adjustments.get(goal.lower(), 1.0)
    
    daily_calories = round(bmr * multiplier * adjustment)
    
    prompt = (
        "–°–æ—Å—Ç–∞–≤—å 7-–¥–Ω–µ–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è (–∑–∞–≤—Ç—Ä–∞–∫/–æ–±–µ–¥/—É–∂–∏–Ω/–ø–µ—Ä–µ–∫—É—Å—ã), "
        "–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω—ã–µ –≥—Ä–∞–º–º–æ–≤–∫–∏ –∏ –ø—Ä–∏–º–µ—Ä–Ω—É—é –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –≤ –¥–µ–Ω—å. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ.\n\n"
        f"–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:\n- –í–æ–∑—Ä–∞—Å—Ç: {u.get('age')}\n- –ü–æ–ª: {u.get('sex')}\n- –í–µ—Å: {u.get('weight')} –∫–≥\n- –†–æ—Å—Ç: {u.get('height')} —Å–º\n- –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {u.get('activity')}\n- –¶–µ–ª—å: {u.get('goal')}\n- –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {u.get('prefs')}\n- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {u.get('restr')}\n- –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {daily_calories} –∫–∫–∞–ª/–¥–µ–Ω—å"
    )
    try:
        text = await ai_chat("–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥ –∏ –¥–∏–µ—Ç–æ–ª–æ–≥. –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–æ.", prompt, 0.4)
    except Exception as e:
        logger.exception(f"AI plan error: {e}")
        text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    await send_chunks_with_back(
        lambda **kw: update.message.reply_text(**kw),
        text,
        parse_mode=ParseMode.HTML,
        disable_preview=True
    )

    # Add ML-based recommendations
    recommendations = generate_ml_recommendations(update.effective_user.id)
    if recommendations:
        await update.message.reply_text(
            f"üí° <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n\n{recommendations}",
            parse_mode=ParseMode.HTML,
            reply_markup=back_to_menu_kb()
        )
    
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ.", reply_markup=reply_kb())
    return ConversationHandler.END

async def plan_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=reply_kb())
    return ConversationHandler.END

# --------------------
# Promo / admin / payments
# --------------------
async def promo_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥: /promo –ö–û–î", reply_markup=reply_kb())
        return
    code = (context.args[0] or "").strip()
    if not code:
        await update.message.reply_text("–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–æ–∫–æ–¥.", reply_markup=reply_kb())
        return

    row = db.execute(
        "SELECT days, labs_credits, max_uses, used_count, expires_at FROM promocodes WHERE code=%s",
        (code,)
    ).fetchone()
    if not row:
        await update.message.reply_text("–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_kb())
        return

    days = int(row["days"] or 0)
    credits = int(row["labs_credits"] or 0)
    max_uses = row["max_uses"]
    used_count = row["used_count"]
    expires_at = row["expires_at"]

    now = dt.datetime.now(dt.timezone.utc)
    if expires_at:
        try:
            exp_dt = expires_at if isinstance(expires_at, dt.datetime) else dt.datetime.fromisoformat(expires_at)
            if exp_dt.tzinfo is None:
                exp_dt = exp_dt.replace(tzinfo=dt.timezone.utc)
            if exp_dt < now:
                await update.message.reply_text("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫.", reply_markup=reply_kb())
                return
        except Exception as e:
            logger.warning(f"Error parsing promo expiry: {e}")

    if max_uses is not None and used_count is not None and used_count >= max_uses:
        await update.message.reply_text("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω.", reply_markup=reply_kb())
        return

    days = max(0, min(days, PROMO_MAX_DAYS))

    if days <= 0 and credits <= 0:
        await update.message.reply_text("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–∞—ë—Ç.", reply_markup=reply_kb())
        return

    try:
        parts = []
        if days > 0:
            activate_sub(update.effective_user.id, days)
            parts.append(f"+{days} –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏")
        if credits > 0:
            add_labs_credit(update.effective_user.id, credits)
            parts.append(f"+{credits} –∞–Ω–∞–ª–∏–∑(–∞/–æ–≤)")

        db.execute("UPDATE promocodes SET used_count = COALESCE(used_count,0) + 1 WHERE code=%s", (code,))
        db.commit()

        await update.message.reply_text(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω: " + ", ".join(parts) + ".", reply_markup=reply_kb())
    except Exception as e:
        logger.exception(f"apply promo error: {e}")
        db.rollback()
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.", reply_markup=reply_kb())

async def addpromo_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if (user.username or "").lower() != ADMIN_USERNAME:
        await update.message.reply_text("‚õî –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è PostgreSQL
    args = context.args
    if len(args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n"
            "/addpromo –ö–û–î –î–ù–ò [LABS_CREDITS] [MAX_USES] [YYYY-MM-DD]\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚Ä¢ /addpromo TEST30 30\n"
            "‚Ä¢ /addpromo FREE2 0 2\n"
            "‚Ä¢ /addpromo MEGA 30 5 100 2025-12-31"
        )
        return

    code = args[0].strip()
    days = int(args[1])

    labs_credits = 0
    max_uses = None
    expires_at = None

    if len(args) == 3:
        max_uses = int(args[2])
    elif len(args) >= 4:
        labs_credits = int(args[2])
        max_uses = int(args[3]) if len(args) >= 4 else None
        expires_at = args[4] if len(args) >= 5 else None

    try:
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: ON CONFLICT –¥–ª—è PostgreSQL
        db.execute(
            "INSERT INTO promocodes (code, days, labs_credits, max_uses, used_count, expires_at) "
            "VALUES (%s, %s, %s, %s, 0, %s) "
            "ON CONFLICT (code) DO UPDATE SET "
            "days = EXCLUDED.days, "
            "labs_credits = EXCLUDED.labs_credits, "
            "max_uses = EXCLUDED.max_uses, "
            "expires_at = EXCLUDED.expires_at",
            (code, days, labs_credits, max_uses, expires_at)
        )
        db.commit()

        await update.message.reply_text(
            f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω: +{days} –¥–Ω–µ–π, +{labs_credits} –∫—Ä–µ–¥–∏—Ç(–æ–≤) –∞–Ω–∞–ª–∏–∑–æ–≤, "
            f"max_uses={max_uses}, expires_at={expires_at}"
        )
    except Exception as e:
        logger.exception(f"Error creating promo: {e}")
        db.rollback()
        await update.message.reply_text("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

async def precheckout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message
    sp = msg.successful_payment

    payload = (sp.invoice_payload or "").strip()
    currency = (sp.currency or "").upper()
    amount = int(sp.total_amount or 0)
    tg_charge_id = sp.telegram_payment_charge_id
    provider_charge_id = sp.provider_payment_charge_id

    logger.info(f"Successful payment u={user_id} payload={payload} cur={currency} amount={amount}")

    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
    if provider_charge_id:
        dup = db.execute(
            "SELECT 1 FROM payments WHERE provider_charge_id=%s",
            (provider_charge_id,)
        ).fetchone()
        if dup:
            await msg.reply_text("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ —É—á—Ç—ë–Ω üëç", reply_markup=back_to_menu_kb())
            return

    if not payload.startswith("pay:"):
        logger.warning(f"Invalid payment payload u={user_id}: {payload}")
        await msg.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.", reply_markup=back_to_menu_kb())
        return

    try:
        if payload.startswith("pay:sub:"):
            key = payload.split(":", 2)[2]
            plan = next((p for p in PLANS if p.get("key") == key), None)
            if not plan:
                logger.error(f"Plan not found for key={key}")
                await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_menu_kb())
                return

            expected_currency = (plan.get("currency") or os.getenv("CURRENCY", "RUB")).upper()
            expected_amount = int(plan.get("price_minor") or 0)
            if expected_amount and amount != expected_amount:
                logger.warning(f"Amount mismatch plan={key}: got {amount}, expected {expected_amount}")
                await msg.reply_text("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞ —Å —Ç–∞—Ä–∏—Ñ–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_menu_kb())
                return
            if currency and expected_currency and currency != expected_currency:
                logger.warning(f"Currency mismatch plan={key}: got {currency}, expected {expected_currency}")
                await msg.reply_text("–í–∞–ª—é—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞ —Å —Ç–∞—Ä–∏—Ñ–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_menu_kb())
                return

            days = int(plan.get("days") or 0)
            if days <= 0:
                await msg.reply_text("–¢–∞—Ä–∏—Ñ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (0 –¥–Ω–µ–π). –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_menu_kb())
                return

            exp = activate_sub(user_id, days)

            labs_credits = int(plan.get("labs_credits") or 0)
            if labs_credits > 0:
                add_labs_credit(user_id, labs_credits)

            db.execute(
                "INSERT INTO payments (user_id, payload, currency, amount, tg_charge_id, provider_charge_id) "
                "VALUES (%s, %s, %s, %s, %s, %s) "
                "ON CONFLICT (provider_charge_id) DO NOTHING",
                (user_id, payload, currency, amount, tg_charge_id, provider_charge_id)
            )
            db.commit()

            extras = f"\n+{labs_credits} –∞–Ω–∞–ª–∏–∑–∞(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ." if labs_credits > 0 else ""
            await msg.reply_text(
                f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {days} –¥–Ω–µ–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {exp.strftime('%d.%m.%Y')}."
                f"{extras}\n–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!",
                reply_markup=back_to_menu_kb()
            )
            return

        if payload.startswith("pay:labs"):
            qty = 1
            parts = payload.split(":")
            if len(parts) == 3 and parts[2].isdigit():
                qty = max(1, int(parts[2]))

            try:
                expected_one = int(LABS_ONEOFF.get("price_minor") or 0)
            except Exception:
                expected_one = 0
            expected_total = expected_one * qty if expected_one else 0
            if expected_total and amount != expected_total:
                logger.warning(f"Labs amount mismatch: got {amount}, expected {expected_total} (qty={qty})")
                await msg.reply_text("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ —Å–æ–≤–ø–∞–ª–∞. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_menu_kb())
                return

            add_labs_credit(user_id, qty)

            db.execute(
                "INSERT INTO payments (user_id, payload, currency, amount, tg_charge_id, provider_charge_id) "
                "VALUES (%s, %s, %s, %s, %s, %s) "
                "ON CONFLICT (provider_charge_id) DO NOTHING",
                (user_id, payload, currency, amount, tg_charge_id, provider_charge_id)
            )
            db.commit()

            await msg.reply_text(f"‚úÖ –û–ø–ª–∞—á–µ–Ω–æ! –î–æ—Å—Ç—É–ø–Ω–æ {qty} –∞–Ω–∞–ª–∏–∑(–∞/–æ–≤).", reply_markup=back_to_menu_kb())
            return

        db.execute(
            "INSERT INTO payments (user_id, payload, currency, amount, tg_charge_id, provider_charge_id) "
            "VALUES (%s, %s, %s, %s, %s, %s) "
            "ON CONFLICT (provider_charge_id) DO NOTHING",
            (user_id, payload, currency, amount, tg_charge_id, provider_charge_id)
        )
        db.commit()
        logger.warning(f"Unknown payment payload u={user_id}: {payload}")
        await msg.reply_text("‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–µ–Ω, –Ω–æ —Ç–∏–ø –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", reply_markup=back_to_menu_kb())
        return

    except (UniqueViolation, psycopg.IntegrityError):
        await msg.reply_text("–≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ —É—á—Ç—ë–Ω üëç", reply_markup=back_to_menu_kb())
    except Exception as e:
        logger.exception(f"successful_payment error u={user_id}: {e}")
        db.rollback()
        await msg.reply_text(
            "‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=back_to_menu_kb()
        )

# --------------------
# Routers: text/photo/document
# --------------------
def clear_modes(context):
    for k in (EXPECT_LABS, EXPECT_RECIPE, EXPECT_QUESTION, EXPECT_MEAL, EXPECT_WEIGHT):
        context.user_data[k] = False

async def text_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    m = update.effective_message
    user = update.effective_user
    text = (getattr(m, "text", None) or "").strip()
    if not text:
        return

    logger.info("Text from %s: %s", user.id, text)

    if text == BTN_PROFILE:
        row = db.execute(
            "SELECT expires_at, free_until FROM subscriptions WHERE user_id=%s",
            (user.id,)
        ).fetchone()

        credits = get_labs_credits(user.id)
        ach_count = db.execute(
            "SELECT COUNT(*) AS c FROM achievements WHERE user_id=%s",
            (user.id,)
        ).fetchone()["c"]

        sub_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"
        if row:
            if row["expires_at"]:
                exp = row["expires_at"]
                if isinstance(exp, str):
                    sub_text = f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {exp[:10]}"
                else:
                    sub_text = f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ {exp.strftime('%Y-%m-%d')}"
            elif row["free_until"]:
                fu = row["free_until"]
                if isinstance(fu, str):
                    sub_text = f"–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ {fu[:10]}"
                else:
                    sub_text = f"–ü—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–æ {fu.strftime('%Y-%m-%d')}"

        challenges = db.execute(
            "SELECT challenge_type, progress FROM challenges WHERE user_id=%s AND completed=0",
            (user.id,)
        ).fetchall()

        profile_text = (
            f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b>\n\n{escape(sub_text)}\n"
            f"–ö—Ä–µ–¥–∏—Ç—ã –∞–Ω–∞–ª–∏–∑–æ–≤: {credits}\n"
            f"–î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {ach_count}"
        )

        if challenges:
            profile_text += "\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–µ–ª–ª–µ–Ω–¥–∂–∏:</b>"
            for ch in challenges:
                name = get_challenge_name(ch["challenge_type"])
                profile_text += f"\n‚Ä¢ {escape(name)}: {ch['progress']}/7 –¥–Ω–µ–π"

        await m.reply_text(profile_text, parse_mode=ParseMode.HTML, reply_markup=reply_kb())
        return

    if text == BTN_DIARY:
        if not has_access(user.id, user.username):
            await update.message.reply_text("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞/–ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.", reply_markup=reply_kb())
            return
        clear_modes(context)
        await show_diary(update, context, period="today")
        return
    
    if text == BTN_QUESTION:
        if not has_access(user.id, user.username):
            await m.reply_text("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ/–ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
            return
        context.user_data[EXPECT_QUESTION] = True
        await m.reply_text("–ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å (–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ).", reply_markup=reply_kb())
        return

    if text == BTN_TRACKER:
        if not has_access(user.id, user.username):
            await update.message.reply_text("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞/–ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø.", reply_markup=reply_kb())
            return
        clear_modes(context)
        context.user_data[EXPECT_MEAL] = True
        await update.message.reply_text(
            "–û—Ç–ø—Ä–∞–≤—å –ø—Ä–∏—ë–º –ø–∏—â–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫:\n"
            "–∫—É—Ä–∏–Ω–∞—è –≥—Ä—É–¥–∫–∞ 150 –≥\n—Ä–∏—Å 70 –≥\n(–∏–ª–∏ —Ñ–æ—Ç–æ/—á–µ–∫).",
            reply_markup=back_to_menu_kb()
        )
        return

    if context.user_data.get(EXPECT_LABS):
        await handle_labs_text(update, context, text)
        return
    if context.user_data.get(EXPECT_RECIPE):
        await handle_recipe_text(update, context, text)
        return
    if context.user_data.get(EXPECT_QUESTION):
        await handle_question_text(update, context, text)
        return
    if context.user_data.get(EXPECT_MEAL):
        await handle_meal_text(update, context, text)
        return
    if context.user_data.get(EXPECT_WEIGHT):
        await handle_weight_tracking(update, context, text)
        return

    if context.chat_data.get("state") in (PLAN_AGE, PLAN_SEX, PLAN_WEIGHT, PLAN_HEIGHT, PLAN_ACTIVITY, PLAN_GOAL, PLAN_PREFS, PLAN_RESTR):
        return

    if not has_access(user.id, user.username):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ –∏–ª–∏ –ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
        return
    await update.message.reply_text("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
    try:
        res = await ai_chat("–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.", text, 0.5)
    except Exception as e:
        logger.exception(f"default ai error: {e}")
        res = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    for part in split_message(res):
        html_part = format_ai_html(part)
        await update.message.reply_text(html_part, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

async def photo_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    photos = update.message.photo
    if not photos:
        await update.message.reply_text("–§–æ—Ç–æ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
        return
    photo = photos[-1]
    file = await update.get_bot().get_file(photo.file_id)
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    data = buf.getvalue()

    if context.user_data.get(EXPECT_LABS):
        is_admin = (user.username or "").lower() == ADMIN_USERNAME and ADMIN_USERNAME
        if not is_admin:
            used_free = db.execute("SELECT used_free_lab FROM subscriptions WHERE user_id=%s", (user.id,)).fetchone()
            if not used_free or not used_free["used_free_lab"]:
                db.execute("UPDATE subscriptions SET used_free_lab=1 WHERE user_id=%s", (user.id,))
                db.commit()
            else:
                if not consume_labs_credit(user.id):
                    await update.message.reply_text("–ù–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤. –ö—É–ø–∏ —Ä–∞–∑–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.", reply_markup=reply_kb())
                    return
        text = await ocr_image_bytes(data)
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ —Ñ–æ—Ç–æ.", reply_markup=reply_kb())
            return
        await handle_labs_text(update, context, text)
        return

    if context.user_data.get(EXPECT_QUESTION):
        text = await ocr_image_bytes(data)
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=reply_kb())
            return
        await handle_question_text(update, context, text)
        return

    if context.user_data.get(EXPECT_RECIPE):
        caption = (update.message.caption or "").strip()
        products = caption if caption else (await ocr_image_bytes(data))
        if not products.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã. –î–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å.", reply_markup=reply_kb())
            return
        await handle_recipe_text(update, context, products)
        return

    if context.user_data.get(EXPECT_MEAL):
        caption = (update.message.caption or "").strip()
        meal_text = caption if caption else (await ocr_image_bytes(data))
        if not meal_text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø–æ–¥–ø–∏—Å—å/—Ç–µ–∫—Å—Ç.", reply_markup=reply_kb())
            return
        await handle_meal_text(update, context, meal_text)
        return

    await update.message.reply_text("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.", reply_markup=reply_kb())

async def document_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    doc = update.message.document
    if not doc:
        await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    file = await update.get_bot().get_file(doc.file_id)
    buf = io.BytesIO()
    await file.download_to_memory(out=buf)
    data = buf.getvalue()

    if context.user_data.get(EXPECT_LABS):
        is_admin = (user.username or "").lower() == ADMIN_USERNAME and ADMIN_USERNAME
        if not is_admin:
            used_free = db.execute("SELECT used_free_lab FROM subscriptions WHERE user_id=%s", (user.id,)).fetchone()
            if not used_free or not used_free["used_free_lab"]:
                db.execute("UPDATE subscriptions SET used_free_lab=1 WHERE user_id=%s", (user.id,))
                db.commit()
            else:
                if not consume_labs_credit(user.id):
                    await update.message.reply_text("–ù–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤. –ö—É–ø–∏ —Ä–∞–∑–æ–≤—É—é —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.", reply_markup=reply_kb())
                    return
        text = ""
        if doc.mime_type == "application/pdf" or (doc.file_name and doc.file_name.lower().endswith(".pdf")):
            text = await ocr_pdf_bytes(data)
        else:
            text = await ocr_image_bytes(data)
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ.", reply_markup=reply_kb())
            return
        await handle_labs_text(update, context, text)
        return

    if context.user_data.get(EXPECT_RECIPE):
        text = await ocr_pdf_bytes(data)
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã.", reply_markup=reply_kb())
            return
        await handle_recipe_text(update, context, text)
        return

    if context.user_data.get(EXPECT_QUESTION):
        text = await ocr_pdf_bytes(data)
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç.", reply_markup=reply_kb())
            return
        await handle_question_text(update, context, text)
        return

    if context.user_data.get(EXPECT_MEAL):
        text = await ocr_pdf_bytes(data)
        if not text.strip():
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç/—á–µ–∫.", reply_markup=reply_kb())
            return
        await handle_meal_text(update, context, text)
        return

    await update.message.reply_text("–î–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø—Ä–∏—à–ª–∏ —Å–Ω–æ–≤–∞.", reply_markup=reply_kb())

# --------------------
# Domain-specific handlers
# --------------------
async def handle_labs_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    await update.message.reply_text("‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    prompt = "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ –∞–Ω–∞–ª–∏–∑—ã –∏ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n\n" + text
    try:
        ans = await ai_chat("–ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ.", prompt, 0.3)
    except Exception as e:
        logger.warning(f"AI labs error: {e}")
        ans = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω–∞–ª–∏–∑—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    await send_chunks_with_back(
        lambda **kw: update.message.reply_text(**kw),
        ans,
        parse_mode=ParseMode.HTML,
        disable_preview=True
    )
    context.user_data[EXPECT_LABS] = False

async def handle_recipe_text(update: Update, context: ContextTypes.DEFAULT_TYPE, products_text: str):
    await update.message.reply_text("‚è≥ –§–æ—Ä–º–∏—Ä—É—é —Ä–µ—Ü–µ–ø—Ç—ã...")
    prompt = (
        "–¢—ã —à–µ—Ñ-–ø–æ–≤–∞—Ä –∏ –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤—å 3 —Ä–µ—Ü–µ–ø—Ç–∞. –î–ª—è –∫–∞–∂–¥–æ–≥–æ: "
        "–Ω–∞–∑–≤–∞–Ω–∏–µ, –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å –≥—Ä–∞–º–º–æ–≤–∫–∞–º–∏, —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è, –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å –∏ –ë–ñ–£ –Ω–∞ –ø–æ—Ä—Ü–∏—é.\n\n"
        f"–ü—Ä–æ–¥—É–∫—Ç—ã:\n{products_text}"
    )
    try:
        ans = await ai_chat("–ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ, —è—Å–Ω–æ.", prompt, 0.5)
    except Exception as e:
        logger.warning(f"AI recipe error: {e}")
        ans = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã."
    await send_chunks_with_back(
        lambda **kw: update.message.reply_text(**kw),
        ans,
        parse_mode=ParseMode.HTML,
        disable_preview=True
    )    
    context.user_data[EXPECT_RECIPE] = False

async def handle_question_text(update: Update, context: ContextTypes.DEFAULT_TYPE, q_text: str):
    await update.message.reply_text("‚è≥ –û—Ç–≤–µ—á–∞—é...")
    prompt = f"–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n{q_text}"
    try:
        ans = await ai_chat("–ö—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.", prompt, 0.5)
    except Exception as e:
        logger.warning(f"AI question error: {e}")
        ans = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    await send_chunks_with_back(
        lambda **kw: update.message.reply_text(**kw),
        ans,
        parse_mode=ParseMode.HTML,
        disable_preview=True
    )
    context.user_data[EXPECT_QUESTION] = False

async def handle_meal_text(update: Update, context: ContextTypes.DEFAULT_TYPE, meal_text: str):
    await update.message.reply_text("‚è≥ –û—Ü–µ–Ω–∏–≤–∞—é –ø—Ä–∏—ë–º –ø–∏—â–∏ (–∫–∫–∞–ª/–ë–ñ–£)...")
    # First try DB-based estimate
    est = try_estimate_meal_from_db(meal_text)
    used_ai = False
    if est is None:
        # ask AI for strict JSON as fallback
        system = "–¢—ã –Ω—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON: {\"calories\": int, \"proteins\": float, \"fats\": float, \"carbs\": float, \"summary\": \"text\"}"
        prompt = (
            "–û—Ü–µ–Ω–∏ –ø—Ä–∏—ë–º –ø–∏—â–∏ –∏ –≤–µ—Ä–Ω–∏ JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            '{"calories": 450, "proteins": 25.5, "fats": 12.0, "carbs": 50.0, "summary": "–∫—Ä–∞—Ç–∫–æ"}\n\n'
            f"–¢–µ–∫—Å—Ç: {meal_text}"
        )
        try:
            resp = await ai_chat(system, prompt, 0.2)
        except Exception as e:
            logger.warning(f"AI meal error: {e}")
            resp = ""
        calories, p, f, c, summary = parse_meal_json(resp)
        used_ai = True
    else:
        calories, p, f, c, summary = est

    ts = dt.datetime.now(dt.timezone.utc).isoformat()
    try:
        db.execute("INSERT INTO meals (user_id, ts, text, calories, proteins, fats, carbs) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                   (update.effective_user.id, ts, meal_text, calories, p, f, c))
        db.commit()
    except Exception as e:
        logger.warning(f"DB insert meal error: {e}")

    award_achievements_after_meal(update.effective_user.id)
    context.user_data[EXPECT_MEAL] = False

    source = "–ò–ò" if used_ai else "–±–∞–∑—ã –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
    if used_ai:
        summary_html = html.escape(summary)
    else:
        summary_html = summary
    total_line = f"<b>–ò—Ç–æ–≥–æ</b>: {calories} –∫–∫–∞–ª | –ë {p:.1f} –ñ {f:.1f} –£ {c:.1f}\n–ò—Å—Ç–æ—á–Ω–∏–∫: {source}"
    await update.message.reply_text(f"<b>–ó–∞–ø–∏—Å–∞–ª –ø—Ä–∏—ë–º –ø–∏—â–∏</b>\n{summary_html}<br>{total_line}", parse_mode=ParseMode.HTML, reply_markup=back_to_menu_kb())

async def handle_weight_tracking(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
    try:
        weight = float(text.replace(",", "."))
        user_id = update.effective_user.id
        ts = dt.datetime.now(dt.timezone.utc).isoformat()
        
        db.execute(
            "INSERT INTO weight_tracking (user_id, weight, ts) VALUES (%s, %s, %s)",
            (user_id, weight, ts)
        )
        db.commit()
        
        await update.message.reply_text(
            f"‚úÖ –í–µ—Å {weight} –∫–≥ –∑–∞–ø–∏—Å–∞–Ω!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.",
            reply_markup=back_to_menu_kb()
        )
        
        context.user_data[EXPECT_WEIGHT] = False
        
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 68.5)")

def parse_meal_json(text: str) -> Tuple[int, float, float, float, str]:
    try:
        s = (text or "").strip().replace("`", "")
        m = re.search(r"\{.*\}", s, flags=re.S)
        j = json.loads(m.group(0)) if m else json.loads(s)
        cal = int(j.get("calories", 0))
        p = float(j.get("proteins", 0.0))
        f = float(j.get("fats", 0.0))
        c = float(j.get("carbs", 0.0))
        summary = str(j.get("summary", "–ø—Ä–∏—ë–º –ø–∏—â–∏"))
        return max(0, cal), max(0.0, p), max(0.0, f), max(0.0, c), summary
    except Exception:
        cal = first_int(r"(\d{2,4})\s*k?–∫–∫–∞–ª", text) or 0
        p = first_float(r"–±(?:–µ–ª–∫[–∞–∏])?[:\s]*([0-9]+(?:\.[0-9]+)?)", text) or 0.0
        f = first_float(r"–∂(?:–∏—Ä[—ã–∞])?[:\s]*([0-9]+(?:\.[0-9]+)?)", text) or 0.0
        c = first_float(r"—É(?:—É–≥–ª–µ–≤–æ–¥[—ã–∞])?[:\s]*([0-9]+(?:\.[0-9]+)?)", text) or 0.0
        return int(cal), float(p), float(f), float(c), "–ø—Ä–∏—ë–º –ø–∏—â–∏"

def first_int(pattern: str, s: str) -> Optional[int]:
    if not s: return None
    m = re.search(pattern, s, re.I)
    return int(m.group(1)) if m else None

def first_float(pattern: str, s: str) -> Optional[float]:
    if not s: return None
    m = re.search(pattern, s, re.I)
    return float(m.group(1)) if m else None

def award_achievements_after_meal(user_id: int):
    try:
        now = dt.datetime.now(dt.timezone.utc)
        week_from = (now - dt.timedelta(days=7)).isoformat()
        rows = db.execute("SELECT ts, text FROM meals WHERE user_id=%s AND ts>=%s ORDER BY ts", (user_id, week_from)).fetchall()
        breakfast_days = set()
        water_ok = False
        sugar_flag = False if rows else False
        for r in rows:
            txt = (r["text"] or "").lower()
            try:
                hr = dt.datetime.fromisoformat(r["ts"]).hour
            except Exception:
                hr = None
            if hr is not None and 5 <= hr < 10:
                breakfast_days.add(r["ts"][:10])
            if "–≤–æ–¥–∞" in txt:
                water_ok = True
            if re.search(r"—Å–∞—Ö–∞—Ä|—Ç–æ—Ä—Ç|—à–æ–∫–æ–ª–∞–¥|–ø–µ—á–µ–Ω—å–µ|–∫–æ–Ω—Ñ–µ—Ç", txt):
                sugar_flag = True
        if len(breakfast_days) >= 7:
            try:
                db.execute("INSERT INTO achievements (user_id, badge, ts) VALUES (%s, %s, %s) ON CONFLICT DO NOTHING", 
                          (user_id, "–ó–∞–≤—Ç—Ä–∞–∫-–≥–µ—Ä–æ–π", now.isoformat()))
            except Exception:
                pass
        if water_ok:
            try:
                db.execute("INSERT INTO achievements (user_id, badge, ts) VALUES (%s, %s, %s) ON CONFLICT DO NOTHING", 
                          (user_id, "–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤–æ–¥—ã", now.isoformat()))
            except Exception:
                pass
        if not sugar_flag and rows:
            try:
                db.execute("INSERT INTO achievements (user_id, badge, ts) VALUES (%s, %s, %s) ON CONFLICT DO NOTHING", 
                          (user_id, "7 –¥–Ω–µ–π –±–µ–∑ —Å–∞—Ö–∞—Ä–∞", now.isoformat()))
            except Exception:
                pass
        db.commit()
    except Exception as e:
        logger.warning(f"award achievements error: {e}")

async def send_stats(user_id: int, target_msg):
    since = (dt.datetime.now(dt.timezone.utc) - dt.timedelta(days=7)).isoformat()
    rows = db.execute("SELECT ts, calories, proteins, fats, carbs FROM meals WHERE user_id=%s AND ts>=%s ORDER BY ts", (user_id, since)).fetchall()
    
    if not rows:
        await target_msg.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.", reply_markup=reply_kb())
        return
        
    daily = {}
    for r in rows:
        day = r["ts"][:10]
        d = daily.setdefault(day, {"cal":0,"p":0.0,"f":0.0,"c":0.0})
        d["cal"] += r["calories"] or 0
        d["p"] += r["proteins"] or 0.0
        d["f"] += r["fats"] or 0.0
        d["c"] += r["carbs"] or 0.0
        
    lines = [f"{day}: {d['cal']} –∫–∫–∞–ª | –ë {round(d['p'],1)} –ñ {round(d['f'],1)} –£ {round(d['c'],1)}" for day, d in sorted(daily.items())]
    total_cal = sum(d["cal"] for d in daily.values())
    avg = round(total_cal / max(1, len(daily)))
    
    await target_msg.reply_text("üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 7 –¥–Ω–µ–π:</b>\n" + "\n".join(lines) + f"\n\n–°—Ä–µ–¥–Ω–µ—Å—É—Ç–æ—á–Ω–æ: ~{avg} –∫–∫–∞–ª", 
                           parse_mode=ParseMode.HTML)

# --------------------
# Weight tracking command
# --------------------
async def weight_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not has_access(update.effective_user.id, update.effective_user.username):
        await update.message.reply_text("–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ/–ø—Ä–æ–±–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É.", reply_markup=reply_kb())
        return
        
    context.user_data[EXPECT_WEIGHT] = True
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 68.5):")


# --------------------
# Register handlers and run
# --------------------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("promo", promo_cmd))
    app.add_handler(CommandHandler("addpromo", addpromo_cmd))
    app.add_handler(CommandHandler("weight", weight_cmd))
    app.add_handler(CommandHandler("app", setup_menu_button))  
    
  
    # --- –î–∏–∞–ª–æ–≥ ¬´–ü–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è¬ª ---
    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(on_menu_callback, pattern="^plan$")],
        states={
            PLAN_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_age)],
            PLAN_SEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_sex)],
            PLAN_WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_weight)],
            PLAN_HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_height)],
            PLAN_ACTIVITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_activity)],
            PLAN_GOAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_goal)],
            PLAN_PREFS: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_prefs)],
            PLAN_RESTR: [MessageHandler(filters.TEXT & ~filters.COMMAND, plan_finish)],
        },
        fallbacks=[CommandHandler("cancel", plan_cancel)],
    )
    app.add_handler(conv_handler)

    # --- –û—Å—Ç–∞–ª—å–Ω—ã–µ callback-–∏ –º–µ–Ω—é ---
    app.add_handler(CallbackQueryHandler(on_menu_callback))

    # --- –†–æ—É—Ç–µ—Ä—ã –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–∞ ---
    app.add_handler(MessageHandler(filters.PHOTO, photo_router))
    app.add_handler(MessageHandler(filters.Document.ALL, document_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_router))

    # --- –ü–ª–∞—Ç–µ–∂–∏ ---
    app.add_handler(PreCheckoutQueryHandler(precheckout))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))

    logger.info("Bot starting...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()